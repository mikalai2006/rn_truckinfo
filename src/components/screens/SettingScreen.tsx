import React, {useCallback, useRef} from 'react';
import {View, Text, Button, NativeModules, Platform, RefreshControl, TouchableOpacity} from 'react-native';
import {ScrollView} from 'react-native-gesture-handler';
// import WebviewBlok from '../WebviewBlok';
import PushNotification from 'react-native-push-notification';
import RButton from '~components/r/RButton';
import {SSkeleton} from '~components/ui/SSkeleton';
import SBottomSheet, {BottomSheetRefProps} from '~components/ui/SBottomSheet';
import {useColorScheme} from 'nativewind';
import FocusStatusBar from '~components/FocusStatusBar';
import WidgetHeaderApp from '~components/widgets/WidgetHeaderApp';
import {iGlobe} from '~utils/icons';
import SIcon from '~components/ui/SIcon';

const SettingScreen = ({navigation}) => {
    const {colorScheme} = useColorScheme();

    const testPush = () => {
        PushNotification.localNotification({
            channelId: 'test',
            // bigPictureUrl: 'https://placehold.co/600x400.png',
            //picture: 'https://clipart-library.com/image_gallery/n839804.png',
            /* Android Only Properties */
            id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            ticker: 'My Notification Ticker', // (optional)
            autoCancel: true, // (optional) default: true
            // largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
            // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
            subText: 'This is a subText', // (optional) default: none
            color: 'red', // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: 'some_tag', // (optional) add tag to message
            group: 'group', // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification
            title: 'My Notification Title', // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
            message: 'My Notification Message', // (required)
        });
    };
    const testShedule = () => {
        PushNotification.localNotificationSchedule({
            id: 1,
            message: `Reminder Message`,
            date: new Date(Date.now() + 60 * 1000),
            repeatType: 'day',
            // repeatTime:
            allowWhileIdle: false,
            exact: true,
        });
    };
    const deviceLanguage =
        Platform.OS === 'ios'
            ? NativeModules.SettingsManager.settings.AppleLocale ||
              NativeModules.SettingsManager.settings.AppleLanguages[0] //iOS 13
            : NativeModules.I18nManager.localeIdentifier;

    const ref = useRef<BottomSheetRefProps>(null);
    const onPress = useCallback(() => {
        const isActive = ref?.current?.isActive();
        if (isActive) {
            ref?.current?.scrollTo(0);
        } else {
            ref?.current?.scrollTo(-200);
        }
    }, []);

    const [refreshing, setRefreshing] = React.useState(false);

    const onRefresh = React.useCallback(() => {
        setRefreshing(true);
        setTimeout(() => {
            setRefreshing(false);
        }, 2000);
    }, []);

    return (
        <View style={{flex: 1, paddingTop: 0}} tw="bg-s-100 dark:bg-s-900">
            <FocusStatusBar
                barStyle={colorScheme === 'dark' ? 'light-content' : 'dark-content'}
                translucent
                backgroundColor="transparent"
            />
            <View tw="mt-10 mb-4">
                <WidgetHeaderApp />
            </View>
            <View tw="p-4">
                <View tw="bg-white dark:bg-s-800 rounded-lg p-4">
                    <Text tw="text-black dark:text-white">Language</Text>
                    <TouchableOpacity
                        onPress={() => navigation.navigate('LanguageScreen')}
                        activeOpacity={0.8}
                        tw="flex flex-row p-3">
                        <SIcon path={iGlobe} size={20} tw="text-black dark:text-white mr-2" />
                        <Text tw="text-black dark:text-white">{deviceLanguage}</Text>
                    </TouchableOpacity>
                </View>
            </View>
            <Button title="Test push" onPress={() => testPush()} />
            <Button title="Test shedule" onPress={() => testShedule()} />
            {/* <WebviewBlok
        source={{
          uri: 'http://localhost:3000/setting',
        }}
      /> */}
            <RButton text="Open sheet" onPress={onPress} />
            <SBottomSheet ref={ref} snapPoints={[0, -300]}>
                <Text>Awesome</Text>
                <View tw="p-4">
                    <SSkeleton classString="mb-2 h-6" width="100%" />
                    <SSkeleton classString="h-12 w-12 rounded-full" />
                </View>

                <ScrollView refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}>
                    <View tw="h-[50vh] bg-s-300" />
                    <View tw="h-screen bg-s-400" />
                    <View tw="h-[20vh] bg-s-300" />
                </ScrollView>
            </SBottomSheet>
        </View>
    );
};

export default SettingScreen;
